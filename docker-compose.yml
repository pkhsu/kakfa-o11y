services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    command:
      - '-config.file=/etc/loki/loki-config.yaml'
    restart: unless-stopped

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    ports:
      - "3200:3200" # Tempo HTTP
      - "14317:14317" # Tempo OTLP gRPC (different port)
      - "14318:14318" # Tempo OTLP HTTP (different port)
    volumes:
      - ./tempo:/etc/tempo
      - tempo_data:/var/tempo
    command:
      - '-config.file=/etc/tempo/tempo.yaml'
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_JMX_HOSTNAME: zookeeper
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=9999"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9997:9997"  # JMX port
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # JMX Configuration for monitoring
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=9997"
      # Enable structured logging for better log collection
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    # Enable structured logging for Kafka broker
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=kafka,component=broker"

  # Kafka JMX Exporter for Prometheus metrics
  kafka-jmx-exporter:
    image: bitnami/jmx-exporter:latest
    container_name: kafka-jmx-exporter
    ports:
      - "8080:8080"
    volumes:
      - ./kafka-jmx:/opt/jmx_prometheus
    command: ["8080", "/opt/jmx_prometheus/kafka-jmx-config.yml"]
    depends_on:
      - kafka
    restart: unless-stopped

  # Zookeeper JMX Exporter  
  zookeeper-jmx-exporter:
    image: bitnami/jmx-exporter:latest
    container_name: zookeeper-jmx-exporter
    ports:
      - "8081:8081"
    volumes:
      - ./kafka-jmx:/opt/jmx_prometheus
    command: ["8081", "/opt/jmx_prometheus/zookeeper-jmx-config.yml"]
    depends_on:
      - zookeeper
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command:
      - '--config=/etc/otelcol-contrib/config.yaml'
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8889:8889" # Prometheus exporter
      - "13133:13133" # Health check
      - "1777:1777" # pprof
      - "55679:55679" # zpages
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
      # Docker socket mounting disabled due to permission issues
      # Focus on OTLP application logs instead of container logs
      # - /var/run/docker.sock:/var/run/docker.sock:ro
      # - /var/lib/docker/containers:/var/log/containers:ro
    restart: unless-stopped
    depends_on:
      - loki
      - tempo
      - prometheus
    # Enable structured logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  java-producer:
    build:
      context: ./java-producer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      # Zero-code Java Agent Auto-instrumentation
      OTEL_SERVICE_NAME: "java-kafka-producer"
      OTEL_SERVICE_VERSION: "1.0.0"
      OTEL_SERVICE_NAMESPACE: "kafka-tutorial"
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=tutorial,component.type=producer,language=java"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_METRICS_EXPORTER: "otlp"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_TRACES_EXPORTER: "otlp"
      # Enable comprehensive auto-instrumentation
      OTEL_JAVAAGENT_ENABLED: "true"
      OTEL_INSTRUMENTATION_KAFKA_ENABLED: "true"
      OTEL_INSTRUMENTATION_LOGBACK_APPENDER_ENABLED: "true"
      OTEL_INSTRUMENTATION_LOGGING_ENABLED: "true"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    healthcheck:
      test: ["CMD", "java", "-cp", "/app/libs/*", "com.example.HealthCheck"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  java-consumer:
    build:
      context: ./java-consumer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      # Zero-code Java Agent Auto-instrumentation
      OTEL_SERVICE_NAME: "java-kafka-consumer"
      OTEL_SERVICE_VERSION: "1.0.0"
      OTEL_SERVICE_NAMESPACE: "kafka-tutorial"
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=tutorial,component.type=consumer,language=java"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_METRICS_EXPORTER: "otlp"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_TRACES_EXPORTER: "otlp"
      # Enable comprehensive auto-instrumentation
      OTEL_JAVAAGENT_ENABLED: "true"
      OTEL_INSTRUMENTATION_KAFKA_ENABLED: "true"
      OTEL_INSTRUMENTATION_LOGBACK_APPENDER_ENABLED: "true"
      OTEL_INSTRUMENTATION_LOGGING_ENABLED: "true"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    healthcheck:
      test: ["CMD", "java", "-cp", "/app/libs/*", "com.example.HealthCheck"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  python-producer:
    build:
      context: ./python-producer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      # Zero-code auto-instrumentation via environment variables
      OTEL_SERVICE_NAME: "python-kafka-producer"
      OTEL_SERVICE_VERSION: "1.0.0"
      OTEL_SERVICE_NAMESPACE: "kafka-tutorial"
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=tutorial,component.type=producer,language=python"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_PYTHON_LOG_CORRELATION: "true"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; socket.create_connection(('kafka', 9092), timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  python-consumer:
    build:
      context: ./python-consumer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      # Zero-code auto-instrumentation via environment variables
      OTEL_SERVICE_NAME: "python-kafka-consumer"
      OTEL_SERVICE_VERSION: "1.0.0"
      OTEL_SERVICE_NAMESPACE: "kafka-tutorial"
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=tutorial,component.type=consumer,language=python"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_PYTHON_LOG_CORRELATION: "true"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; socket.create_connection(('kafka', 9092), timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  go-producer:
    build:
      context: ./go-producer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      # Go OpenTelemetry configuration via environment variables
      OTEL_SERVICE_NAME: "go-kafka-producer"
      OTEL_SERVICE_VERSION: "1.0.0"
      OTEL_SERVICE_NAMESPACE: "kafka-tutorial"
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=tutorial,component.type=producer,language=go"
      OTEL_EXPORTER_OTLP_ENDPOINT: "otel-collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    healthcheck:
      test: ["CMD", "/go-producer", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    # Enable structured logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  go-consumer:
    build:
      context: ./go-consumer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      # Go OpenTelemetry configuration via environment variables
      OTEL_SERVICE_NAME: "go-kafka-consumer"
      OTEL_SERVICE_VERSION: "1.0.0"
      OTEL_SERVICE_NAMESPACE: "kafka-tutorial"
      OTEL_RESOURCE_ATTRIBUTES: "deployment.environment=tutorial,component.type=consumer,language=go"
      OTEL_EXPORTER_OTLP_ENDPOINT: "otel-collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    healthcheck:
      test: ["CMD", "/go-consumer", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    # Enable structured logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  streamlit-app:
    build:
      context: ./streamlit-app
    ports:
      - "8501:8501"
    restart: on-failure
    depends_on:
      - grafana
      - otel-collector
    environment:
      GRAFANA_URL: "http://localhost:3000"

volumes:
  grafana_data: {}
  prometheus_data: {}
  loki_data: {}
  tempo_data: {}
